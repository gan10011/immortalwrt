name: ZN_M2-WIFI-Local

on:
  workflow_dispatch:
  # schedule:
  #   - cron: 0 12 * * *

permissions: write-all

env:
  CONFIG_FILE: imm.config
  DIY_SCRIPT: ZN_M2-diy-script-lite.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ZN_M2-WIFI
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check Server Performance(检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment(初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) || true
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks(合并磁盘)
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 4096
        temp-reserve-mb: 1000
        root-reserve-mb: 4096

    - name: Checkout Repository(检出仓库)
      uses: actions/checkout@v4
      with:
        path: immortalwrt  # 使用仓库名作为路径
        fetch-depth: 0

    - name: Setup Build Environment(设置编译环境)
      run: |
        cd immortalwrt  # 使用仓库名作为路径
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        echo "REPO_URL=$(git remote get-url origin)" >> $GITHUB_ENV
        echo "REPO_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

    - name: Generate Variables(生成变量)
      run: |
        cd $OPENWRT_PATH
        
        # 确保配置文件存在
        CONFIG_PATH="$GITHUB_WORKSPACE/$CONFIG_FILE"
        if [ ! -f "$CONFIG_PATH" ]; then
          echo "::error::找不到配置文件 $CONFIG_PATH"
          echo "工作区内容:"
          ls -la $GITHUB_WORKSPACE
          exit 1
        fi
        
        echo "使用配置文件: $CONFIG_PATH"
        cp "$CONFIG_PATH" .config
        
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(basename $REPO_URL .git)"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Apply Custom Script(应用自定义脚本)
      run: |
        SCRIPT_PATH="$GITHUB_WORKSPACE/$DIY_SCRIPT"
        if [ -f "$SCRIPT_PATH" ]; then
          echo "应用兆能M2精简脚本..."
          chmod +x "$SCRIPT_PATH"
          cd $OPENWRT_PATH
          bash -x "$SCRIPT_PATH" || {
            echo "::error::自定义脚本执行失败"
            exit 1
          }
        else
          echo "未找到自定义脚本 $SCRIPT_PATH，跳过"
        fi

    - name: Cache Toolchain(缓存工具链)
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: actions/cache@v3
      with:
        path: ${{ env.OPENWRT_PATH }}/dl
        key: ${{ runner.os }}-toolchain-${{ env.SOURCE_REPO }}-${{ hashFiles('${{ env.OPENWRT_PATH }}/.config') }}
        restore-keys: |
          ${{ runner.os }}-toolchain-${{ env.SOURCE_REPO }}-

    - name: Install Feeds(安装feeds)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply Custom Files(应用自定义文件)
      run: |
        FILES_PATH="$GITHUB_WORKSPACE/files"
        if [ -d "$FILES_PATH" ]; then
          echo "找到自定义文件目录，正在复制到 $OPENWRT_PATH..."
          cp -rfv "$FILES_PATH" $OPENWRT_PATH/
        else
          echo "未找到自定义文件目录，跳过"
        fi

    - name: Download Packages(下载软件包)
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -delete

    - name: Compile Firmware(编译固件)
      id: compile
      run: |
        cd $OPENWRT_PATH
        if make -j$(($(nproc)+1)); then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          # 重试单线程编译
          echo "多线程编译失败，尝试单线程编译..."
          make -j1 V=s || {
            echo "编译失败！"
            exit 1
          }
          echo "status=success" >> $GITHUB_OUTPUT
        fi
        echo "DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

    - name: Organize Artifacts(整理固件)
      if: steps.compile.outputs.status == 'success'
      run: |
        # 使用精确的目标路径
        TARGET_PATH="$OPENWRT_PATH/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}"
        
        # 检查目标路径是否存在
        if [ ! -d "$TARGET_PATH" ]; then
          echo "错误：目标路径 '$TARGET_PATH' 不存在"
          echo "固件目录内容："
          find $OPENWRT_PATH/bin/targets -type d -print
          exit 1
        fi
        
        cd $TARGET_PATH
        cp $OPENWRT_PATH/.config build.config
        mkdir -p packages
        find $OPENWRT_PATH/bin/packages -name '*.ipk' -exec mv {} packages/ \;
        tar -zcf Packages.tar.gz packages
        rm -rf packages
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload to Release(发布固件)
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.FIRMWARE_TAG }}
        name: ${{ env.FIRMWARE_TAG }} - ${{ env.DATE }}
        body: |
          ### 🧾 固件信息
          **设备**: 兆能M2 (ZN-M2)  
          **内核**: 6.6 with NSS加速  
          **源码**: [${{ env.SOURCE_REPO }}@${{ env.REPO_BRANCH }}](${{ env.REPO_URL }})  
          **管理地址**: 192.168.1.1  
          **默认密码**: password  

          ### 📜 更新记录
          ${{ env.VERSION_INFO }}
        files: ${{ env.FIRMWARE_PATH }}/*
